%{

#include <iostream>
#include <string>
#include <vector>
#include <map>
#include "ast.hpp"

using namespace std;

extern int yylex();

void yyerror(const std::string &msg) {
	cerr << msg << std::endl;
	exit(1);
}

%}

%union {
	int i;
	double d;
	string* s;
	ExpressionNode* e;
	vector<ExpressionNode*> *ve;
	vector<string> *vs;
	FunctionPrototypeNode* p;
}

%token token_int token_double token_id token_assign token_return token_function
%token token_for token_in token_if token_else
%token token_eq token_leq token_geq token_not token_neq

%type <i> token_int
%type <d> token_double
%type <s> token_id
%type <e> EXPRESSION EXPRESSIONP STATEMENT STATEMENTSP
%type <vs> LIST_PARAMS LIST_PARAMSP
%type <ve> LIST_ARGS LIST_ARGSP STATEMENTS


%right token_assign
%right token_not

%left ':'
%left token_eq token_neq
%left '<' '>' token_leq token_geq
%left '+' '-'
%left '*' '/'

%%

STATEMENTS
    : STATEMENTSP {
		$$ = new BlockNode(*$1);
		delete $1;
	}
    | {
		$$ = new BlockNode(vector<ExpressionNode*>);
	}
    ;

STATEMENTSP
    : STATEMENTSP STATEMENT {
		$$ = $1;
		$$->push_back($2);
	}
    | STATEMENT {
		$$ = new vector<ExpressionNode*>($1);
	}
    ;

STATEMENT
    : token_id token_assign EXPRESSION {
		$$ = new AssignmentNode(*$1, $3);
		delete $1;
	}
    | token_id '[' EXPRESSION ']' token_assign EXPRESSION {

	}
    | token_id token_assign token_function '(' LIST_PARAMS ')' '{' STATEMENTS '}' {
		FunctionNode f(new PrototypeNode(*$1, *$5), $8);
		delete $1;
		delete $5;
		f.codegen();
	}
    | token_if '(' EXPRESSION ')' '{' STATEMENTS '}' {
		$$ = new IfElseNode($3, $6);
	}
    | token_if '(' EXPRESSION ')' '{' STATEMENTS '}' token_else '{' STATEMENTS '}' {
		$$ = new IfElseNode($3, $6, $10);
	}
    | token_for '(' token_id  token_in EXPRESSION ':' EXPRESSION ')' '{' STATEMENTS '}' {
		$$ = new ForLoopNode(*$3, $5, $7, $10);
		delete $3;
	}
	| token_return '(' EXPRESSIONP ')' {
		$$ = new ReturnNode($3);
	}
    ;

EXPRESSIONP
    : EXPRESSION {
		$$ = $1;
	}
    | {
		$$ = NULL;
	}
    ;

LIST_PARAMS
    : LIST_PARAMSP {
		$$ = $1;
	}
    | {
		$$ = new vector<string>;
	}
    ;

LIST_PARAMSP
    : LIST_PARAMSP ',' token_id {
		$$ = $1;
		$$->push_back(*$3);
		delete $3;
	}
    | token_id {
		$$ = new vector<string>(*$1);
		delete $1;
	}
    ;

/* LIST_DEC_ARGS_OR_ARGS
    : LIST_ARGS {
		$$ = $1;
	}
    | LIST_DEC_ARGS {

	}
    ; */

/* LIST_DEC_ARGS
    : LIST_DEC_ARGS ',' token_id token_assign EXPRESSION {

	}
    | token_id token_assign EXPRESSION {

	}
    ; */

LIST_ARGS
    : LIST_ARGSP {
		$$ = $1;
	}
    | {
		$$ = new vector<ExpressionNode*>;
	}
    ;

LIST_ARGSP
    : LIST_ARGSP ',' EXPRESSION {
		$$ = $1;
		$$->push_back($3);
	}
    | EXPRESSION {
		$$ = new vector<ExpressionNode*>($1);
	}
    ;

EXPRESSION
    : EXPRESSION '+' EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::plus, $1, $3);
	}
    | EXPRESSION '-' EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::minus, $1, $3);
	}
    | EXPRESSION '*' EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::mul, $1, $3);
	}
    | EXPRESSION '/' EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::div, $1, $3);
	}
    | EXPRESSION '>' EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::gt, $1, $3);
	}
    | EXPRESSION '<' EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::lt, $1, $3);
	}
    | EXPRESSION token_eq EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::eq, $1, $3);
	}
    | EXPRESSION token_leq EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::leq, $1, $3);
	}
    | EXPRESSION token_geq EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::geq, $1, $3);
	}
    | EXPRESSION token_neq EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::neq, $1, $3);
	}
    | token_not EXPRESSION {

	}
    | '(' EXPRESSION ')' {
		$$ = $2;
	}
    | token_id {
		$$ = VariableNode(*$1);
		delete $1;
	}
    | token_id '[' EXPRESSION ']' {

	}
    | token_id '(' LIST_ARGS ')' {
		$$ = new FunctionCallNode(*$1, *$3);
		delete $1;
		delete $3;
	}
    | token_int {
		$$ = new ConstantNode($1);
	}
    | token_double {

	}
    ;

%%

int main(void){
    /* FUNKCIJE ZA MAT, PRINT */
    yyparse();
    return 0;
}
