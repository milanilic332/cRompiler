%{

#include <iostream>
#include <string>
#include <vector>
#include <map>
#include "ast.hpp"

using namespace std;

extern int yylex();

void yyerror(const std::string &msg) {
	cerr << msg << std::endl;
	exit(1);
}

extern llvm::Module* TheModule;
extern llvm::LLVMContext TheContext;
extern IRBuilder<> Builder;
Function *Main;
Function *Printf;
Value* StringInt;
Value* StringDouble;


%}

%union {
	int i;
	double d;
	string *s;
	ExpressionNode *e;
	vector<ExpressionNode*> *ve;
	vector<pair<my_type, string>> *vts;
	FunctionPrototypeNode *p;
	my_type mt;
}

%token token_int token_double token_id token_assign token_return token_function
%token token_for token_in token_if token_else token_print token_main token_array token_while
%token token_eq token_leq token_geq token_not token_neq
%token token_or token_and
%token token_int_name token_double_name token_seq

%type <i> token_int
%type <d> token_double
%type <s> token_id
%type <e> EXPRESSION EXPRESSIONP STATEMENT
%type <vts> LIST_PARAMS LIST_PARAMSP
%type <ve> LIST_ARGS LIST_ARGSP STATEMENTSP
%type <mt> INTORDOUBLE


%right token_assign
%right token_not

%left ':'
%left token_or token_and
%left token_eq token_neq
%left '<' '>' token_leq token_geq
%left '+' '-'
%left '*' '/'

%%

STATEMENTSP
    : STATEMENTSP STATEMENT {
		$$ = $1;
		$$->push_back($2);
	}
    | STATEMENT {
		$$ = new vector<ExpressionNode*>;
		$$->push_back($1);
	}
    ;

STATEMENT
    : token_id token_assign EXPRESSION {
		$$ = new AssignmentNode(*$1, $3);
		delete $1;
	}
	| token_id token_assign token_seq '(' EXPRESSION ',' EXPRESSION  ',' EXPRESSION ')'{
		$$ = new SequenceNode(*$1, $5, $7, $9);
		delete $1;
	}
	| token_id token_assign token_array '(' LIST_ARGS ')' {
		$$ = new ArrayAssignmentNode(*$1, *$5);
		delete $1;
		delete $5;
	}
    | token_id '[' EXPRESSION ']' token_assign EXPRESSION {
		$$ = new ModifyArrayNode(*$1, $3, $6);
		delete $1;
	}
    | INTORDOUBLE token_id token_assign token_function '(' LIST_PARAMS ')' '{' STATEMENTSP '}' {
		FunctionNode f(FunctionPrototypeNode(*$2, *$6, $1), new BlockNode(*$9));
		delete $2;
		delete $6;
		delete $9;
		f.codegen();
		$$ = new EmptyNode();
	}
	| token_int_name token_main token_assign token_function '(' LIST_PARAMS ')' '{' STATEMENTSP '}' {
		vector<Type*> v(0);
	    FunctionType* FT2 = FunctionType::get(Type::getInt32Ty(TheContext), v, false);
	    Main = Function::Create(FT2, Function::ExternalLinkage, "main", TheModule);
	    BasicBlock *BB = BasicBlock::Create(TheContext, "entry", Main);
	    Builder.SetInsertPoint(BB);

		StringInt = Builder.CreateGlobalStringPtr("%d\n");
		StringDouble =  Builder.CreateGlobalStringPtr("%lf\n");
		$$ = new BlockNode(*$9);
		$$->codegen();
		delete $9;

		Builder.CreateRet(ConstantInt::get(TheContext, APInt(32, 0)));
	    verifyFunction(*Main);
	}
    | token_if '(' EXPRESSION ')' '{' STATEMENTSP '}' {
		$$ = new IfElseNode($3, new BlockNode(*$6), new EmptyNode());
	}
    | token_if '(' EXPRESSION ')' '{' STATEMENTSP '}' token_else '{' STATEMENTSP '}' {
		$$ = new IfElseNode($3, new BlockNode(*$6), new BlockNode(*$10));
		delete $6;
		delete $10;
	}
    | token_for '(' token_id  token_in EXPRESSION ':' EXPRESSION ')' '{' STATEMENTSP '}' {
		$$ = new ForLoopNode(*$3, $5, $7, new BlockNode(*$10));
		delete $3;
		delete $10;
	}
	| token_while '(' EXPRESSION ')' '{' STATEMENTSP '}' {
		$$ = new WhileNode($3, new BlockNode(*$6));
	}
	| token_return '(' EXPRESSIONP ')' {
		$$ = new ReturnNode($3);
	}
	| token_print '(' EXPRESSIONP ')' {
		$$ = new PrintNode($3);
	}
    ;

EXPRESSIONP
    : EXPRESSION {
		$$ = $1;
	}
    | {
		$$ = NULL;
	}
    ;

LIST_PARAMS
    : LIST_PARAMSP {
		$$ = $1;
	}
    | {
		$$ = new vector<pair<my_type, string>>;
	}
    ;

LIST_PARAMSP
    : LIST_PARAMSP ',' INTORDOUBLE token_id {
		$$ = $1;
		pair<my_type, string> d;
		d.first = $3;
		d.second = *$4;
		$$->push_back(d);
		delete $4;
	}
    | INTORDOUBLE token_id {
		pair<my_type, string> d;
		d.first = $1;
		d.second = *$2;
		$$ = new vector<pair<my_type, string>>;
		$$->push_back(d);
		delete $2;
	}
    ;

INTORDOUBLE
	: token_int_name {
		$$ = my_type::int_;
	}
	| token_double_name {
		$$ = my_type::double_;
	}
	;

LIST_ARGS
    : LIST_ARGSP {
		$$ = $1;
	}
    | {
		$$ = new vector<ExpressionNode*>;
	}
    ;

LIST_ARGSP
    : LIST_ARGSP ',' EXPRESSION {
		$$ = $1;
		$$->push_back($3);
	}
    | EXPRESSION {
		$$ = new vector<ExpressionNode*>;
		$$->push_back($1);
	}
    ;

EXPRESSION
    : EXPRESSION '+' EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::plus, $1, $3);
	}
    | EXPRESSION '-' EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::minus, $1, $3);
	}
    | EXPRESSION '*' EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::mul, $1, $3);
	}
    | EXPRESSION '/' EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::di, $1, $3);
	}
    | EXPRESSION '>' EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::gt, $1, $3);
	}
    | EXPRESSION '<' EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::lt, $1, $3);
	}
    | EXPRESSION token_eq EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::eq, $1, $3);
	}
    | EXPRESSION token_leq EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::leq, $1, $3);
	}
    | EXPRESSION token_geq EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::geq, $1, $3);
	}
    | EXPRESSION token_neq EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::neq, $1, $3);
	}
	| EXPRESSION token_or EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::or_, $1, $3);
	}
	| EXPRESSION token_and EXPRESSION {
		$$ = new BinaryOperatorNode(bin_op::and_, $1, $3);
	}
    | '(' EXPRESSION ')' {
		$$ = $2;
	}
    | token_id {
		$$ = new VariableNode(*$1);
		delete $1;
	}
    | token_id '[' EXPRESSION ']' {
		$$ = new AccessArrayNode(*$1, $3);
		delete $1;
	}
    | token_id '(' LIST_ARGS ')' {
		$$ = new FunctionCallNode(*$1, *$3);
		delete $1;
		delete $3;
	}
    | token_int {
		$$ = new IntNode($1);
	}
    | token_double {
		$$ = new DoubleNode($1);
	}
    ;

%%


int main() {
	InitializeModuleAndPassManager();

	FunctionType *FT1 = FunctionType::get(IntegerType::getInt32Ty(TheContext), PointerType::get(Type::getInt8Ty(TheContext), 0), true);
	Printf = Function::Create(FT1, Function::ExternalLinkage, "printf", TheModule);

	yyparse();

	TheModule->print(llvm::outs(), nullptr);

	delete TheModule;

	return 0;
}
